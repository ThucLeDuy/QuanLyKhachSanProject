using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using QuanLyKhachSan.BUS;
using QuanLyKhachSan.DAO;
using System.Data.SqlClient;
using Firebase.Database;
using Firebase.Database.Streaming;
using Firebase.Database.Query;
using System.Net;

namespace QuanLyKhachSan
{
    public partial class FormChinh : DevExpress.XtraEditors.XtraForm
    {
        private FormDangNhap fDangNhap;
        private NhanVien nhanVienDangNhapHienTai;
        private static PhongBUS phongBUS = new PhongBUS();
        private static KhachHangBUS khacHangBUS = new KhachHangBUS();
        private static DatPhongTaiChoBUS datPhongBUS = new DatPhongTaiChoBUS();
        private static HoaDonDichVuBUS hoaDonDvBUS = new HoaDonDichVuBUS();
        private static HoaDonThuePhongBUS hoaDonThuePhongBUS = new HoaDonThuePhongBUS();
        private static NhanVienBUS nhanVienBUS = new NhanVienBUS();
        private static DichVuBUS dichVuBUS = new DichVuBUS();
        private static DataOfflineBUS dataOffBUS = new DataOfflineBUS();
        private FirebaseClient firebase = new FirebaseClient("https://qlks-2faa6.firebaseio.com/");
        private Boolean ketNoiInternet;
        public FormChinh(NhanVien nhanVienHienTai)
        {
            InitializeComponent();
            navigationPaneAdmin.State = DevExpress.XtraBars.Navigation.NavigationPaneState.Collapsed;//thu gọn menu quản lý
            KhoiTaoDuDataSource();
            //lấy ra NV hiện tại đang đăng nhập
            nhanVienDangNhapHienTai = nhanVienHienTai;
            cbBoxChucVuTabQL.SelectedIndex = 1;
            lblNhanVienDangNhap2.Text = nhanVienHienTai.HoTenNV;
            lblNhanVienDangNhap.Text = nhanVienHienTai.HoTenNV;
            KiemTraQuyenTruyCap(nhanVienHienTai);
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataScPhieuDatPhong.Fill();
            phongBUS.CapNhatTrangThaiPhong();

            Task taskHDDV = new Task(RunStreamingHDDV);
            Task taskKH = new Task(RunStreamingKhachHang);
            taskHDDV.Start();
            //taskKH.Start();
            taskHDDV.Wait();
            //taskKH.Wait();
            //Task.WaitAll(taskHDDV, taskKH);

            // Fill a SqlDataSource

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            
        }
        private void KiemTraQuyenTruyCap(NhanVien nhanVien)
        {
            //phân quyền nếu là tiếp tân thì tắt các chức năng sau
            if(nhanVien.ChucVu == "Tiếp Tân")
            {
                btnXoaNhanVienTabQL.Enabled = false;
                btnSuaNhanVienTabQL.Enabled = false;
                btnThemNhanVien.Enabled = false;
                btnThemDichVuTabQL.Enabled = false;
                btnSuaDichVuTabQL.Enabled = false;
                btnXoaDichVuTabQL.Enabled = false;
                btnThemPhongTabQL.Enabled = false;
                btnSuaPhongTabQL.Enabled = false;
                btnXoaPhongTabQL.Enabled = false;
                btnThemLoaiPhongTabQL.Enabled = false;
                btnSuaLoaiPhongTabQL.Enabled = false;
                btnXoaLoaiPhongTabQL.Enabled = false;
                btnThemHDThuePhong.Enabled = false;
                btnSuaHDThuePhong.Enabled = false;
                btnXoaHDThuePhong.Enabled = false;
            }
        }
        public void KhoiTaoDuDataSource()
        {
            //Đổ dữ liệu vào các data source
            sqlDataScHoaDonThuePhongs.Fill();
            sqlDataScNhanVien.Fill();
            sqlDataSource1.Fill();
            khachHangTableAdapter1.Fill(quanLyKhachSanDTSkhachHang.KhachHang);
            phongTableAdapter1.Fill(quanLyKhachSanDataPhong.Phong);
            loaiPhongTableAdapter1.Fill(quanLyKhachSanDataLoaiPhog.LoaiPhong);
            phongTableAdapter2.Fill(quanLyKhachSanDataSet5.Phong);
            sqlDataScPhieuDatPhong.Fill();
            dichVuTableAdapter2.Fill(quanLyKhachSanDataSet6.DichVu);
            sqlDataScHoaDonDV_ThemDV.Fill();
            sqlDataSource7.Fill();
            sqlDataScTaiKhoanKH.Fill();
            gridControlQuanLyDichVu.DataSource = new QuanLyKhachSan.DAO.QLKSDataContext().DichVus;
        }
        private void tileBar_SelectedItemChanged(object sender, TileItemEventArgs e)
        {
            //tự lật trang cho tab quản lý chi tiết
            navFrQuanLyChiTiet.SelectedPageIndex = tileBarGroupTables.Items.IndexOf(e.Item);
        }
        //Load Form chính
        private void XtraForm1_Load(object sender, EventArgs e)
        {
            foreach (Phong item in phongBUS.HienThiPhong())
            {
                //load danh sách phòng với mỗi user control như một phòng lên flyoutpanel
                ThemPhongChoFlyPanelQuanLyPhong(item);
                //..load...cho Tab đặt phòng trước
                ThemPhongChoFlyPanelDatPhongTruoc(item);
                //..load...cho Tab đặt phòng tại chỗ
                ThemPhongChoFlyPanelDatPhongTaiCho(item);

            }
            foreach(DichVu dv in dichVuBUS.HienThiDichVu())
            {
                //load danh sách dịch vụ với mỗi user control(ucDichVu) như 1 dịch vụ tren flyPanel
                ThemDichVuChoFlyPanelListDichVu(dv);
            }
            

        }   
        //cập nhật textbox mỗi khi chọn 1 dòng cho navigation Page Nhân viên(NV)
        private void gridView1_FocusedRowChanged_1(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            string chucVu = gridViewQuanLLyNhanVien.GetRowCellValue(gridViewQuanLLyNhanVien.FocusedRowHandle, "ChucVu").ToString();
            if (chucVu == "Tiếp Tân") cbBoxChucVuTabQL.SelectedIndex = 0;
            else { cbBoxChucVuTabQL.SelectedIndex = 1; }
             
            txtMaNhanVien.Text = gridViewQuanLLyNhanVien.GetRowCellValue(gridViewQuanLLyNhanVien.FocusedRowHandle, "MaNV").ToString();
            txtPassword.Text = gridViewQuanLLyNhanVien.GetRowCellValue(gridViewQuanLLyNhanVien.FocusedRowHandle, "Password").ToString();
            txtTenNV.Text = gridViewQuanLLyNhanVien.GetRowCellValue(gridViewQuanLLyNhanVien.FocusedRowHandle, "HoTenNV").ToString();
            txtSoDTNV.Text = gridViewQuanLLyNhanVien.GetRowCellValue(gridViewQuanLLyNhanVien.FocusedRowHandle, "Sodt").ToString();
            txtDiaChiNV.Text = gridViewQuanLLyNhanVien.GetRowCellValue(gridViewQuanLLyNhanVien.FocusedRowHandle, "DiaChi").ToString();
            txtCMND_NV.Text = gridViewQuanLLyNhanVien.GetRowCellValue(gridViewQuanLLyNhanVien.FocusedRowHandle, "CMND").ToString();
        }
        //kiểm tra xem các textbox có thông tin hay chưa
        private void KiemTraSaiQuanLyNhanVien()
        {
            if (txtMaNhanVien.Text.Trim() == "" || txtTenNV.Text.Trim() == "" || txtPassword.Text.Trim() == ""
                || txtCMND_NV.Text.Trim() == "" || txtSoDTNV.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống thông tin");
                return;
            }
        }
        //Thêm nhân viên tab quản lý chi tiết nhan viên
        private void btnThemNhanVien_Click(object sender, EventArgs e)
        {
            KiemTraSaiQuanLyNhanVien();
            if (nhanVienBUS.KiemTraTrungMaNV(txtMaNhanVien.Text))
            {
                MessageBox.Show("Trùng mã nhân viên");
                return;
            }
            NhanVien nv = new NhanVien();
            nv.MaNV = txtMaNhanVien.Text;
            nv.HoTenNV = txtTenNV.Text;
            nv.Password = txtPassword.Text;
            nv.ChucVu = cbBoxChucVuTabQL.SelectedItem.ToString();
            nv.DiaChi = txtDiaChiNV.Text;
            nv.CMND = txtCMND_NV.Text;
            nv.Sodt = txtSoDTNV.Text;
            if (nhanVienBUS.ThemNhanVien(nv)) MessageBox.Show("Thêm Thành Công");
        }
        //Xóa nhân viên tab quản lý chi tiết nhan viên
        private void btnXoaNhanVienTabQL_Click(object sender, EventArgs e)
        {
            if (txtMaNhanVien.Text.Trim() == "")
            {
                MessageBox.Show("Chọn một nhân viên để xóa");
                return;
            }
            if (!nhanVienBUS.XoaNhanVien(txtMaNhanVien.Text))
            {
                MessageBox.Show("Xóa không thành công");
            }
        }
        //Sửa nhân viên tab quản lý chi tiết nhan viên
        private void btnSuaNhanVienTabQL_Click(object sender, EventArgs e)
        {
            KiemTraSaiQuanLyNhanVien();
            if (!nhanVienBUS.KiemTraTrungMaNV(txtMaNhanVien.Text))
            {
                MessageBox.Show("Chọn mã nhân viên có sẵn");
                return;
            }
            NhanVien nv = new NhanVien();
            nv.MaNV = txtMaNhanVien.Text;
            nv.HoTenNV = txtTenNV.Text;
            nv.Password = txtPassword.Text;
            nv.ChucVu = cbBoxChucVuTabQL.SelectedItem.ToString();
            nv.DiaChi = txtDiaChiNV.Text;
            nv.CMND = txtCMND_NV.Text;
            nv.Sodt = txtSoDTNV.Text;
            if (nhanVienBUS.CapNhatNhanVien(nv)) MessageBox.Show("Cập Nhật Thành Công");
        }
        //click vào ô ĐẶT PHÒNG trên menu chính
        private void tileItemDatPhong_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 2;
        }
        //nút quay lại menu chính
        private void btn_Home_Click(object sender, EventArgs e)
        {
            MenuChinhClick();
        }
        //nút quay lại menu chính
        private void btnHome1_Click(object sender, EventArgs e)
        {
            navigationPaneAdmin.Visible = false;
        }
        //Thêm các user control uctPhong cho flowPanel -- Chưa hoàn tất
        
        private void ThemDichVuChoFlyPanelListDichVu(DichVu dv)
        {
            //tạo mới uctInfoPhong
            UcDichVu uctDichVu = new UcDichVu(dv);
            //tạo và gán sự kiện click vào button xem Thông Tin trong uctInfoPhong sau khi tạo 1 uctInfoPhong mới 
            uctDichVu.getPanelThongTinDV().MouseClick += new MouseEventHandler(uctDichVu_Click);
            //thêm uctInfoPhong vào flowpanel
            flyPanelDanhSachDV.Controls.Add(uctDichVu);
            //tự tạo nút cuộn nếu flowpanel bị đầy
            flyPanelDanhSachDV.ScrollControlIntoView(uctDichVu);
        }
        private void ThemPhongChoFlyPanelDatPhongTaiCho(Phong phong)
        {
            //tạo mới uctInfoPhong
            UcThongTinPhong uctInfoPhong = new UcThongTinPhong(phong);
            //tạo và gán sự kiện click vào button xem Thông Tin trong uctInfoPhong sau khi tạo 1 uctInfoPhong mới 
            uctInfoPhong.getPanelThongTinPhong().MouseClick += new MouseEventHandler(ucThongTinPhong_Click);
            //thêm uctInfoPhong vào flowpanel
            flyPanelTabDatPhongTaiCho.Controls.Add(uctInfoPhong);
            //tự tạo nút cuộn nếu flowpanel bị đầy
            flyPanelTabDatPhongTaiCho.ScrollControlIntoView(uctInfoPhong);
        }
        private void ThemPhongChoFlyPanelDatPhongTruoc(Phong phong)
        {
            //tạo mới uctInfoPhong
            UcThongTinPhong uctInfoPhong = new UcThongTinPhong(phong);
            //tạo và gán sự kiện click vào button xem Thông Tin trong uctInfoPhong sau khi tạo 1 uctInfoPhong mới 
            uctInfoPhong.getPanelThongTinPhong().MouseClick += new MouseEventHandler(ucThongTinPhong_Click);
            //thêm uctInfoPhong vào flowpanel
            flyPanelTabDatPhongTruoc.Controls.Add(uctInfoPhong);
            //tự tạo nút cuộn nếu flowpanel bị đầy
            flyPanelTabDatPhongTruoc.ScrollControlIntoView(uctInfoPhong);
        }
        private void uctDichVu_Click(object sender, EventArgs e)
        {
            Control containPanel = (Control)sender;

            UcDichVu selectedUcDichVu = (UcDichVu)containPanel.Parent;

            txtMaDVtabThemDV.Text = selectedUcDichVu.dichVuHienTai.MaDV;
            txtMoTaDVtabThemDV.Text = selectedUcDichVu.dichVuHienTai.MoTaDV;
            txtGiaDVTabThemDV.Text = selectedUcDichVu.dichVuHienTai.GiaDV.ToString();
            //selectedUcDichVu.getPanelThongTinDV.
        }
        private void ucThongTinPhong_Click(object sender, EventArgs e)
        {           
            //lấy ra đối  tượng mà nhân viên vừa click, sau đó ép kiểu về type control để lấy sử dụng
            Control containPanel = (Control)sender;

            //Lấy tiếp parent chứa panel là UcThongTinPhong ra và ép kiểu về UcThongTinPhong 
            UcThongTinPhong selectedUcThTinPhog = (UcThongTinPhong)containPanel.Parent;
            txtSoPhongTabDT.Text = selectedUcThTinPhog.phongHienTai.SoPhong;
            txtSoPhongTabTC.Text = selectedUcThTinPhog.phongHienTai.SoPhong;
            txtTienDatTruocTabDT.Text = (selectedUcThTinPhog.phongHienTai.GiaTrenNgay + selectedUcThTinPhog.phongHienTai.GiaQuaDem).Value.ToString();
            //selectedQLPUct.Size = new Size(selectedQLPUct.Size.Width, selectedQLPUct.Size.Height + 10);
        }
        private void ThemPhongChoFlyPanelQuanLyPhong(Phong phong)
        {
            //tạo mới uctQLPhong
            UctQLPhong uctQLPhong = new UctQLPhong(phong);
            //tạo và gán sự kiện click vào button Thêm dịch vụ trong uctQLPhong sau khi tạo 1 uctQLPhong mới 
            uctQLPhong.getButtonThemDV().MouseClick += new MouseEventHandler(uctQLPhongThemDV_click);
            //tạo và gán sự kiện click vào button thanh toán trong uctQLPhong sau khi tạo 1 uctQLPhong mới 
            uctQLPhong.getButtonThanhToan().MouseClick += new MouseEventHandler(uctQLPhongThanhToan_click);
            //tạo và gán sự kiện click vào button đặt phòng trong uctQLPhong sau khi tạo 1 uctQLPhong mới 
            uctQLPhong.getButtonDatPhong().MouseClick += new MouseEventHandler(uctQLPhongDatPhong_click);
            uctQLPhong.getButtonXacThuePhong().MouseClick += new MouseEventHandler(uctQLPhongXacThuc_click);
            uctQLPhong.getPanelQLP().MouseClick += new MouseEventHandler(uctQLPhongChonPhong_click);
            //thêm uctQLPhong vào flowpanel
            flypnlQuanLyP.Controls.Add(uctQLPhong);
            //tự tạo nút cuộn nếu flowpanel bị đầy
            flypnlQuanLyP.ScrollControlIntoView(uctQLPhong);
        }

        //tạo một uctQLPhong chung, uctQLPhong này sẽ thay đổi giá trị bên trong (vd như: số phòng ,..) mỗi
        //lần NV click nút thanh toán hoặc thêm dịch vụ CỦA uctQLPhong đó
        private UctQLPhong selectedQLPUct = null;
        //sự kiện click vào btnThemDV của uctQLPhong hiện tại
        private void uctQLPhongThemDV_click(object sender, EventArgs e)
        {
            //chuyển đến tab thêm dịch vụ
            tabPaneQuanLyPhong.SelectedPage = tabNavPageQuanLyThemDichVu;
            //lấy ra đối  tượng mà nhân viên vừa click, sau đó ép kiểu về type control để lấy sử dụng
            Control containButton = (Control)sender;
            //buton nằm trong panel, panel nằm trong uctQLPhong. Lấy panel chứa button ra trước thông qua .Parent
            Control panelContainControl = (PanelControl)containButton.Parent;
            //Lấy tiếp parent chứa panel là uctQLPhong ra và ép kiểu về uctQLPhong 
            selectedQLPUct = (UctQLPhong)panelContainControl.Parent;
            //kiểm tra xem uctQLPhong đang chọn có bị trống số phòng hay ko
            if (selectedQLPUct.phongHienTai != null)
            {
                //Nếu uctQLPhong ko null
                string maKH = selectedQLPUct.datPhongTC.MaKH;
                if (maKH == null) txtKhachHangThemDV.Text = "";
                txtKhachHangThemDV.Text = maKH;
            }
        }
        private void uctQLPhongXacThuc_click(object sender, EventArgs e)
        {
            
            //lấy ra đối  tượng mà nhân viên vừa click, sau đó ép kiểu về type control để lấy sử dụng
            Control containButton = (Control)sender;
            //buton nằm trong panel, panel nằm trong uctQLPhong. Lấy panel chứa button ra trước thông qua .Parent
            Control panelContainControl = (PanelControl)containButton.Parent;
            //Lấy tiếp parent chứa panel là uctQLPhong ra và ép kiểu về uctQLPhong 
            selectedQLPUct = (UctQLPhong)panelContainControl.Parent;
            //kiểm tra xem uctQLPhong đang chọn có bị trống số phòng hay ko
            if (selectedQLPUct.phongHienTai != null)
            {
                //Nếu uctQLPhong ko null
                DatPhongTaiCho datPhongTruocHT = null;
                datPhongTruocHT = datPhongBUS.LayPhieuDatPhongDatTruocQuaSoPhong(selectedQLPUct.phongHienTai.SoPhong);
                datPhongTruocHT.TrangThaiDatPhong = "O";
                selectedQLPUct.phongHienTai.TinhTrang = 2;
                gridControlQuanLyPhong.Refresh();
                gridControlQuanLyHoaDonThuePhong.Refresh();
                MessageBox.Show("Đã cập nhật cho khách hàng");
            }
        }
        private DatPhongTaiCho phieuDatPhongThanhToanHT;
        //tạo biến chung mã khách hàng, biến này thay đổi mỗi khi NV chọn một UctQLPhong khác
        private String maKhachHangThanhToan = "";
        private void uctQLPhongThanhToan_click(object sender, EventArgs e)
        {

            //chuyển đến tab thêm thanh toán
            navigationPaneAdmin.SelectedPage = navigationPageHoaDon;
            //lấy ra đối  tượng mà nhân viên vừa click, sau đó ép kiểu về type control để lấy sử dụng
            Control panelContainButton = (Control)sender;
            //buton nằm trong panel, panel nằm trong uctQLPhong. Lấy panel chứa button ra trước thông qua .Parent
            Control uctContainControl = (PanelControl)panelContainButton.Parent;
            //Lấy tiếp parent chứa panel là uctQLPhong ra và ép kiểu về uctQLPhong 
            selectedQLPUct = (UctQLPhong)uctContainControl.Parent;
            //kiểm tra xem uctQLPhong đang chọn có bị trống số phòng hay ko
            if (selectedQLPUct.phongHienTai != null)
            {
                phieuDatPhongThanhToanHT = selectedQLPUct.datPhongTC;
                //nếu ko bị trống-> thực hiện lập hóa đơn với tham số là số phòng hiện tại
                LapHoaDon(selectedQLPUct.datPhongTC);
                //lấy ra và hiện danh sách dịch vụ của KH hiện tại
                LamMoiTableDichVuThanhToan(phieuDatPhongThanhToanHT.MaKH);
                
            }
        }
        private String LayTinhTrangPhongQuaSo(int tinhTrang)
        {
            if (tinhTrang == 0) return "Trống";
            else if (tinhTrang == 2) return "Đang Sử Dụng";
            else return "Đã Đặt Trước";//1
        }

        private void uctQLPhongChonPhong_click(object sender, EventArgs e)
        {
            //lấy ra đối  tượng mà nhân viên vừa click, sau đó ép kiểu về type control để lấy sử dụng
            Control panelContainButton = (Control)sender;
            //buton nằm trong panel, panel nằm trong uctQLPhong. Lấy panel chứa button ra trước thông qua .Parent
            Control uctContainControl = (PanelControl)panelContainButton;
            //Lấy tiếp parent chứa panel là uctQLPhong ra và ép kiểu về uctQLPhong 
            selectedQLPUct = (UctQLPhong)uctContainControl.Parent;
            //kiểm tra xem uctQLPhong đang chọn có bị trống số phòng hay ko
            if (selectedQLPUct.phongHienTai != null)
            {
                if(selectedQLPUct.datPhongTC != null)
                {
                    lblTenKhachHangTabQLP.Text = khacHangBUS.LayTenKhachHangByMaKH(selectedQLPUct.datPhongTC.MaKH);
                    lblTinhTrangPhongTabQLP.Text = LayTinhTrangPhongQuaSo(Convert.ToInt32(selectedQLPUct.phongHienTai.TinhTrang));
                    lblNgayTraPhongTabQLP.Text = selectedQLPUct.datPhongTC.NgayDat.AddDays(Convert.ToDouble(selectedQLPUct.datPhongTC.SoNgaySeThue)).ToString();
                }
                else
                {
                    lblTenKhachHangTabQLP.Text = "Không có tên";
                    lblNgayTraPhongTabQLP.Text = "00/00/00";
                    lblTinhTrangPhongTabQLP.Text = "Trống";
                }
                
                //lblTenKhachHangTabQLP.Text = khacHangBUS.LayTenKhachHangByMaKH(selectedQLPUct.datPhongTC.MaKH);
                //nếu ko bị trống-> thực hiện đặt phòng với tham số là số phòng hiện tại
                //LapHoaDon(selectedQLPUct.phongHienTai);
                //lấy ra và hiện danh sách dịch vụ của KH hiện tại
                //LamMoiTableDichVuThanhToan();
            }
        }
        private void uctQLPhongDatPhong_click(object sender, EventArgs e)
        {
            //chuyển đến tab thêm thanh toán
            navigationPaneAdmin.SelectedPage = navigationPageDatPhong;
            //lấy ra đối  tượng mà nhân viên vừa click, sau đó ép kiểu về type control để lấy sử dụng
            Control panelContainButton = (Control)sender;
            //buton nằm trong panel, panel nằm trong uctQLPhong. Lấy panel chứa button ra trước thông qua .Parent
            Control uctContainControl = (PanelControl)panelContainButton.Parent;
            //Lấy tiếp parent chứa panel là uctQLPhong ra và ép kiểu về uctQLPhong 
            selectedQLPUct = (UctQLPhong)uctContainControl.Parent;
            //kiểm tra xem uctQLPhong đang chọn có bị trống số phòng hay ko
            if (selectedQLPUct.phongHienTai != null)
            {
                txtSoPhongTabDT.Text = selectedQLPUct.phongHienTai.SoPhong;
            }
        }
        
        //Lập hóa đơn với tham số là số phòng hiện tại cần thanh toán
        private void LapHoaDon(DatPhongTaiCho phieuDatPhong) //Chi ap dung cho DatPhongTaiCho
        {       
            if (maKhachHangThanhToan == null) lblTenKhachHangTabHD.Text = "";
            else
            {
                //lấy mã khách hàng thông qua số phòng
                maKhachHangThanhToan = phieuDatPhong.MaKH;
                //Gán các giá trị cho textbox
                lblTenKhachHangTabHD.Text = khacHangBUS.LayTenKhachHangByMaKH(maKhachHangThanhToan);
                lblSoPhongTabHD.Text = phieuDatPhong.SoPhong;
                lblSoNguoiTabHD.Text = phieuDatPhong.SoNguoi.ToString();
                lblNgayNhanPTabHD.Text = phieuDatPhong.NgayDat.ToString();
                lblLoaiPhongTabHD.Text = phongBUS.LayPhongQuaSoPhong(phieuDatPhong.SoPhong).TenPhong;
                lblTilePhieuThanhToan.Text = "Phiếu Thanh Toán Ngày " + dateTimeNgayTraPhongTabHD.Value.ToString("MM-dd-yyyy");
                decimal tongTien = 0;
                //tính ngày ở bằng ngày thanh toán trừ ngày lập phiếu
                int tongNgayThue = Convert.ToInt16((dateTimeNgayTraPhongTabHD.Value - phieuDatPhongThanhToanHT.NgayDat).TotalDays);
                //tính tổng tiền
                tongTien = Convert.ToDecimal(tongNgayThue * selectedQLPUct.phongHienTai.GiaTrenNgay);
                lblTongTienTabHD.Text = string.Format("{0:0,0}", tongTien) + " VND";
            }
        }

        private void btnThanhToan_Click(object sender, EventArgs e)
        {   
            //Kiểm tra nhân viên đã chọn khách hàng trong quản lý danh sách phòng cần thanh toán hay chưa          
            if (maKhachHangThanhToan == "")
            {
                //nếu chưa thì quay lại trang quản lý phòng
                navigationPaneAdmin.SelectedPageIndex = 0;
                tabPaneQuanLyPhong.SelectedPage = tabNavQuanLyDSPhong;
                MessageBox.Show("Chưa chọn phòng cần thanh toán");
                return;
            }
            decimal tongTien = 0;
            //tính ngày ở bằng ngày thanh toán trừ ngày lập phiếu
            int tongNgayThue = Convert.ToInt16((dateTimeNgayTraPhongTabHD.Value - phieuDatPhongThanhToanHT.NgayDat).TotalDays);
            //tính tổng tiền
            tongTien = Convert.ToDecimal(tongNgayThue * selectedQLPUct.phongHienTai.GiaTrenNgay);
            lblTongTienTabHD.Text = tongTien.ToString();
            //cập nhật tình trạng cho phòng đã thanh toán
            selectedQLPUct.phongHienTai.TinhTrang = 0;
            datPhongBUS.XoaDatPhongTaiCho(maKhachHangThanhToan, lblSoPhongTabHD.Text, Convert.ToDateTime(lblNgayNhanPTabHD.Text));
            phieuDatPhongThanhToanHT.Phong.TinhTrang = 0;
            LamMoiTableDichVuThanhToan(phieuDatPhongThanhToanHT.MaKH);
            //tạo mới hóa đơn thanh toán
            HoaDonThuePhong hdThuePhong = new HoaDonThuePhong();
            hdThuePhong.MaNV = nhanVienDangNhapHienTai.MaNV;
            hdThuePhong.MaHD = maKhachHangThanhToan + RandomString(3);
            hdThuePhong.MaKH = maKhachHangThanhToan;
            hdThuePhong.NgayLap = DateTime.Now;
            hdThuePhong.NgayDatPhong = dateTimeNgayTraPhongTabHD.Value;
            hdThuePhong.TongTienThuePhong = tongTien;
            hoaDonThuePhongBUS.ThemHoaDonThue(hdThuePhong);
            gridViewQuanLyHoaDonThuePhong.RefreshData();
            gridControlQuanLyHoaDonThuePhong.RefreshDataSource();
            //Load lại danh sách phòng phòng cho flowpanel
            flypnlQuanLyP.Controls.Clear();
            flyPanelTabDatPhongTruoc.Controls.Clear();
            
            foreach (Phong item in phongBUS.HienThiPhong())
            {
                ThemPhongChoFlyPanelDatPhongTruoc(item);
                ThemPhongChoFlyPanelQuanLyPhong(item);
            }
            MessageBox.Show("Đã thanh toán cho khách hàng " + lblTenKhachHangTabHD.Text);
        }
        private void uctPhong_click(object sender, EventArgs e)
        {
                      
        }

        private void tabNavPageHeThongPhong_Click(object sender, EventArgs e)
        {
            //flypnlPhong.Controls.Clear();
            //foreach (Phong item in phongBUS.HienThiPhong())
            //{
            //    ThemPhongChoFlowPanel(item);
            //}
        }
        
        private void KiemTraSaiDatPhongTruoc()
        {
            if(txtSoPhongTabDT.Text.Trim() == "" || txtSoNguoiTabDT.Text.Trim() == "" || txtTienDatTruocTabDT.Text.Trim() == "" || txtSoTheTabDT.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống thông tin");
                return;
            }
        }
        private void KiemTraSaiKHDatPhongTruoc()
        {
            if(txtMaKHTabDT.Text.Trim() == "" || txtTenKHTabDT.Text.Trim() == "" || txtSdtTabDT.Text.Trim() == "" 
                || txtCMNDTabDT.Text.Trim() == "" || txtQuocTichTabDT.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống thông tin");
                return;
            }
        }
        //Thuê phòng
        private void btnDatPhongTruoc_Click(object sender, EventArgs e)
        {
            Phong phonDangChon = phongBUS.LayPhongQuaSoPhong(txtSoPhongTabDT.Text);
            phongBUS.CapNhatTrangThaiPhong();
            flypnlQuanLyP.Controls.Clear();
            foreach (Phong item in phongBUS.HienThiPhong())
            {
                //load danh sách phòng với mỗi user control như một phòng lên flyoutpanel
                ThemPhongChoFlyPanelQuanLyPhong(item);
            }
            //kiểm tra các textbox có điền đủ chưa
            KiemTraSaiKHDatPhongTruoc();
            KiemTraSaiDatPhongTruoc();
            //tạo mới KH và gán giá trị mới cho KH qua textbox  
            KhachHang kh = new KhachHang();
            kh.MaKH = txtMaKHTabDT.Text;
            kh.HoTenKH = txtTenKHTabDT.Text;
            kh.DiaChi = txtDiaChiTabDT.Text;
            kh.Sodt = txtSdtTabDT.Text;
            kh.CMND = txtCMNDTabDT.Text;
            kh.QuocTich = txtQuocTichTabDT.Text;
            //kiểm tra tình trạng của phòng đang chọn
            if(phonDangChon.TinhTrang != 0)
            {
                DateTime ngayDatLonNhat = datPhongBUS.LayNgayDatPhongLonNhatCuaPhong(phonDangChon);
                if (dateTimeNgayDatTabDT.Value > ngayDatLonNhat)
                {
                    dateTimeNgayDatTabDT.Value = ngayDatLonNhat;
                    MessageBox.Show("Vì phòng này đã đặt trước hoặc đang ở nên ngày đặt phải lớn hơn " + ngayDatLonNhat.ToString());
                    return;
                }
            }
            //thêm KH mới
            khacHangBUS.ThemKhachHang(kh);
            //Tạo phiếu đặt phòng trước
            DatPhongTaiCho phieuDatPhongTC01 = new DatPhongTaiCho();
            phieuDatPhongTC01.MaKH = kh.MaKH;
            phieuDatPhongTC01.SoPhong = phonDangChon.SoPhong;
            phieuDatPhongTC01.SoNguoi = Convert.ToInt16(txtSoNguoiTabDT.Text);
            phieuDatPhongTC01.TienDatTruoc = Convert.ToDecimal(txtTienDatTruocTabDT.Text);
            phieuDatPhongTC01.SoThe = txtSoTheTabDT.Text;
            phieuDatPhongTC01.NgayDat = dateTimeNgayDatTabDT.Value;
            phieuDatPhongTC01.NgayToi = dateTimeNgayToiTabDT.Value;
            phieuDatPhongTC01.SoNgaySeThue = Convert.ToInt16(txtSoNgaySeThueTabDT.Text);
            phieuDatPhongTC01.TrangThaiDatPhong = "C";
            //Thêm phiếu Đặt phòng trước
            if (datPhongBUS.ThemDatPhongTaiCho(phieuDatPhongTC01))
            {
                MessageBox.Show("Đã đặt phòng trước cho " + kh.HoTenKH);
            }
            //phongBUS.LayPhongQuaSoPhong(txtSoPhongTabDT.Text).TinhTrang = 1;
            flypnlQuanLyP.Controls.Clear();
            foreach (Phong item in phongBUS.HienThiPhong())
            {
                //load danh sách phòng với mỗi user control như một phòng lên flyoutpanel
                ThemPhongChoFlyPanelQuanLyPhong(item);
            }
        }
        //đã thay thế bằng floweLayout
        private void gridDatPhongTruocTabDatPhong_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            //txtSoPhongTabDT.Text = gridDatPhongTruocTabDatPhong.GetRowCellValue(gridDatPhongTruocTabDatPhong.FocusedRowHandle, "SoPhong").ToString();          
        }
        //đã thay thế bằng floweLayout
        private void gridDatPhongTaiChoTabDatPhong_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            //txtSoPhongTabTC.Text = gridDatPhongTaiChoTabDatPhong.GetRowCellValue(gridDatPhongTaiChoTabDatPhong.FocusedRowHandle, "SoPhong").ToString();
        }
        private void KiemTraSaiDatPhongTaiCho()
        {
            if (txtSoPhongTabTC.Text.Trim() == "" || txtSoNgTabTC.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống thông tin");
                return;
            }
        }
        private void KiemTraSaiKHDatPhongTaiCho()
        {
            if (txtMaKHTabTC.Text.Trim() == "" || txtTenKHTabTC.Text.Trim() == "" || txtSodtTabTC.Text.Trim() == ""
                || txtCMNDTabTC.Text.Trim() == "" || txtQuocTichTabTC.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống thông tin");
                return;
            }
        }
        //Lập phiếu đặt phòng tại chỗ
        private void btnDatPhongTaiCho_Click(object sender, EventArgs e)
        {
            //kiểm tra các textbox có điền đủ chưa
            KiemTraSaiDatPhongTaiCho();
            KiemTraSaiKHDatPhongTaiCho();
            //tạo mới KH và gán giá trị mới cho KH qua textbox  
            KhachHang kh = new KhachHang();
            kh.MaKH = txtMaKHTabTC.Text;
            kh.HoTenKH = txtTenKHTabTC.Text;
            kh.DiaChi = txtDiaChiTabTC.Text;
            kh.Sodt = txtSodtTabTC.Text;
            kh.CMND = txtCMNDTabTC.Text;
            kh.QuocTich = txtQuocTichTabTC.Text;
            khacHangBUS.ThemKhachHang(kh);
            DatPhongTaiCho phieuDatPhong = new DatPhongTaiCho();
            phieuDatPhong.MaKH = kh.MaKH;
            phieuDatPhong.SoPhong = txtSoPhongTabTC.Text;
            phieuDatPhong.SoNguoi = Convert.ToInt32(txtSoNgTabTC.Text);
            phieuDatPhong.NgayDat = dateTimeNgayDatTabTC.Value;
            phieuDatPhong.SoNgaySeThue = Convert.ToInt32(txtSoNgaySeThueTabTC.Text);
            //thêm và tạo phiếu thuê phòng cho khách hàng
            if (datPhongBUS.ThemDatPhongTaiCho(phieuDatPhong))
            {
                MessageBox.Show("Đã đặt phòng cho " + kh.HoTenKH);
            }
            else { MessageBox.Show("Đặt phòng không thành công");}
            phongBUS.LayPhongQuaSoPhong(txtSoPhongTabTC.Text).TinhTrang = 2;
            //cập nhật flowpanel danh sach phòng
            flypnlQuanLyP.Controls.Clear();
            flyPanelTabDatPhongTaiCho.Controls.Clear();
            foreach (Phong item in phongBUS.HienThiPhong())
            {
                //load danh sách phòng với mỗi user control như một phòng lên flyoutpanel
                ThemPhongChoFlyPanelDatPhongTaiCho(item);
                ThemPhongChoFlyPanelQuanLyPhong(item);
            }
        }
        //cập nhật giá trị textbox mỗi khi chọn 1 dòng cho navigation Page Khách Hàng(KH)
        private void gridView3_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            txtMaKHTabQLNV.Text = gridViewQuanLyKhachHang.GetRowCellValue(gridViewQuanLyKhachHang.FocusedRowHandle, "MaKH").ToString();
            txtTenKH.Text = gridViewQuanLyKhachHang.GetRowCellValue(gridViewQuanLyKhachHang.FocusedRowHandle, "HoTenKH").ToString();
            txtDiaChiKH.Text = gridViewQuanLyKhachHang.GetRowCellValue(gridViewQuanLyKhachHang.FocusedRowHandle, "DiaChi").ToString();
            txtSoDtKH.Text = gridViewQuanLyKhachHang.GetRowCellValue(gridViewQuanLyKhachHang.FocusedRowHandle, "Sodt").ToString();
            txtQuocTichKH.Text = gridViewQuanLyKhachHang.GetRowCellValue(gridViewQuanLyKhachHang.FocusedRowHandle, "QuocTich").ToString();
            txtCMND_KH.Text = gridViewQuanLyKhachHang.GetRowCellValue(gridViewQuanLyKhachHang.FocusedRowHandle, "CMND").ToString();
        }
        //cập nhật giá trị textbox mỗi khi chọn 1 dòng cho navigation Page Dịch Vụ(DV)
        private void gridViewQuanLyDichVu_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            txtMaDV.Text = gridViewQuanLyDichVu.GetRowCellValue(gridViewQuanLyDichVu.FocusedRowHandle, "MaDV").ToString();
            txtMoTaDV.Text = gridViewQuanLyDichVu.GetRowCellValue(gridViewQuanLyDichVu.FocusedRowHandle, "MoTaDV").ToString();
            txtGiaDV.Text = gridViewQuanLyDichVu.GetRowCellValue(gridViewQuanLyDichVu.FocusedRowHandle, "GiaDV").ToString();           
        }
        //cập nhật giá trị textbox mỗi khi chọn 1 dòng cho navigation Page Tai khoản
        private void gridViewQuanLyTaiKhoan_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            txtMaKHTabQLTaiKhoan.Text = khacHangBUS.LayTenKhachHangByMaKH(gridViewQuanLyTaiKhoan.GetRowCellValue(gridViewQuanLyTaiKhoan.FocusedRowHandle, "MaKH").ToString());
            txtTinhTrangTabQLTaiKhoan.Text = gridViewQuanLyTaiKhoan.GetRowCellValue(gridViewQuanLyTaiKhoan.FocusedRowHandle, "TinhTrang").ToString();
            dateTimeTabQLTaiKhoan.Value = Convert.ToDateTime(gridViewQuanLyTaiKhoan.GetRowCellValue(gridViewQuanLyTaiKhoan.FocusedRowHandle, "NgayTao"));
        }
        private void KiemTraQuanLyPhong()
        {
            if (txtSoPhong.Text.Trim() == "" || txtTenPhong.Text.Trim() == "" || txtSoTang.Text.Trim() == "" 
                || txtMaLoaiPtabQLP.Text.Trim() == "" || txtSucChua.Text.Trim() == "" || txtGiaTrenNgay.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống thông tin");
                return;
            }
        }
        //Lấy tỉnh trạng phòng
        private int LayTinhTrangPhongQuaSo(string tinhTrang)
        {
            //đổi giá trị của tình trạng phòng mặc định trong SQL là 0 2 1 -> thành Trống, Đang Sử Dụng, và Đã Đặt Trước
            if (tinhTrang == "Trống") return 0;
            else if (tinhTrang == "Đang Sử Dụng") return 2;
            else return 1;//Đã Đặt Trước
        }
        //Thêm phòng mới trong tab quản lý phòng
        private void btnThemPhongTabQL_Click(object sender, EventArgs e)
        {
            KiemTraQuanLyPhong();                        
            if (phongBUS.KiemTraTrungPhong(txtSoPhong.Text))
            {
                MessageBox.Show("Trùng số phòng");
                return;
            }
           
            Phong phong = new Phong();
            phong.SoPhong = txtSoPhong.Text;
            phong.TenPhong = txtTenPhong.Text;
            phong.SoTang = Convert.ToInt16(txtSoTang.Text);
            phong.MaLoaiP = txtMaLoaiPtabQLP.Text;
            phong.SucChua = Convert.ToInt16(txtSucChua.Text);
            phong.GiaTrenNgay = Convert.ToDecimal(txtGiaTrenNgay.Text);
            phong.TinhTrang = LayTinhTrangPhongQuaSo(cbxTinhTrangTabQLCT.SelectedText);
            if (phongBUS.ThemPhong(phong)) MessageBox.Show("Thêm Phòng Thành Công");
            
        }
        //Sửa phòng mới trong tab quản lý phòng
        private void btnSuaPhongTabQL_Click(object sender, EventArgs e)
        {
            KiemTraQuanLyPhong();
            if (!phongBUS.KiemTraTrungPhong(txtSoPhong.Text))
            {
                MessageBox.Show("Chọn phòng có sẵn");
                return;
            }
            Phong phong = new Phong();
            phong.SoPhong = txtSoPhong.Text;
            phong.TenPhong = txtTenPhong.Text;
            phong.SoTang = Convert.ToInt16(txtSoTang.Text);
            phong.MaLoaiP = txtMaLoaiPtabQLP.Text;
            phong.SucChua = Convert.ToInt16(txtSucChua.Text);
            phong.GiaTrenNgay = Convert.ToDecimal(txtGiaTrenNgay.Text);
            phong.TinhTrang = LayTinhTrangPhongQuaSo(cbxTinhTrangTabQLCT.SelectedText);
            if (phongBUS.CapNhatPhong(phong)) MessageBox.Show("Cập Nhật Thành Công");
        }
        //Xóa phòng mới trong tab quản lý phòng
        private void btnXoaPhongTabQL_Click(object sender, EventArgs e)
        {
            if (txtSoPhong.Text.Trim() == "")
            {
                MessageBox.Show("Chọn một phòng để xóa");
                return;
            }
            if (!nhanVienBUS.XoaNhanVien(txtMaNhanVien.Text))
            {
                MessageBox.Show("Xóa không thành công");
            }
        }
        //cập nhật giá trị textbox mỗi khi chọn 1 dòng cho navigation Page Phòng
        private void gridView4_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            txtSoPhong.Text = gridViewQuanLyPhong.GetRowCellValue(gridViewQuanLyPhong.FocusedRowHandle, "SoPhong").ToString();
            txtTenPhong.Text = gridViewQuanLyPhong.GetRowCellValue(gridViewQuanLyPhong.FocusedRowHandle, "TenPhong").ToString();
            txtSoTang.Text = gridViewQuanLyPhong.GetRowCellValue(gridViewQuanLyPhong.FocusedRowHandle, "SoTang").ToString();
            txtMaLoaiPtabQLP.Text = gridViewQuanLyPhong.GetRowCellValue(gridViewQuanLyPhong.FocusedRowHandle, "MaLoaiP").ToString();
            cbxTinhTrangTabQLCT.SelectedIndex = Convert.ToInt16(gridViewQuanLyPhong.GetRowCellValue(gridViewQuanLyPhong.FocusedRowHandle, "TinhTrang"));
            txtSucChua.Text = gridViewQuanLyPhong.GetRowCellValue(gridViewQuanLyPhong.FocusedRowHandle, "SucChua").ToString();
            txtGiaTrenNgay.Text = gridViewQuanLyPhong.GetRowCellValue(gridViewQuanLyPhong.FocusedRowHandle, "GiaTrenNgay").ToString();
        }
        //cập nhật giá trị textbox mỗi khi chọn 1 dòng cho navigation Page Loai Phòng
        private void gridViewQuanLyLoaiPhong_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            txtMaKHTabQLTaiKhoan.Text = gridViewQuanLyTaiKhoan.GetRowCellValue(gridViewQuanLyTaiKhoan.FocusedRowHandle, "MaLoai").ToString();
            txtTinhTrangTabQLTaiKhoan.Text = gridViewQuanLyTaiKhoan.GetRowCellValue(gridViewQuanLyTaiKhoan.FocusedRowHandle, "TenLoai").ToString();
            
            
        }
        //cập nhật giá trị textbox mỗi khi chọn 1 dòng cho navigation Page Hóa Đơn
        private void gridViewQuanLyHoaDonThuePhong_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            txtMaHoaDonTabQL.Text = gridViewQuanLyHoaDonThuePhong.GetRowCellValue(gridViewQuanLyHoaDonThuePhong.FocusedRowHandle, "MaHD").ToString();
            txtMaNhanVienTabQL.Text = gridViewQuanLyHoaDonThuePhong.GetRowCellValue(gridViewQuanLyHoaDonThuePhong.FocusedRowHandle, "MaNV").ToString();
            txtMaKHTabQL.Text = gridViewQuanLyHoaDonThuePhong.GetRowCellValue(gridViewQuanLyHoaDonThuePhong.FocusedRowHandle, "MaKH").ToString();
            txtTongTienTabQL.Text = gridViewQuanLyHoaDonThuePhong.GetRowCellValue(gridViewQuanLyHoaDonThuePhong.FocusedRowHandle, "TongTienThuePhong").ToString();
            dateTimeNgayLapPhieuTabQL.Value = Convert.ToDateTime(gridViewQuanLyHoaDonThuePhong.GetRowCellValue(gridViewQuanLyHoaDonThuePhong.FocusedRowHandle, "NgayLap"));
            dateTimeNgayLapPhieuTabQL.Value = Convert.ToDateTime(gridViewQuanLyHoaDonThuePhong.GetRowCellValue(gridViewQuanLyHoaDonThuePhong.FocusedRowHandle, "NgayDatPhong"));

        }
        //cập nhật giá trị textbox mỗi khi chọn 1 dòng cho navigation Page Dịch Vụ(DV)
        private void gridViewKhachHang_DVtabThemDV_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            txtKhachHangThemDV.Text = gridViewKhachHang_DVtabThemDV.GetRowCellValue(gridViewKhachHang_DVtabThemDV.FocusedRowHandle, "MaKH").ToString();
            dateTimeNgaySuDungTabThemDV.Value = Convert.ToDateTime(gridViewKhachHang_DVtabThemDV.GetRowCellValue(gridViewKhachHang_DVtabThemDV.FocusedRowHandle, "NgaySuDungDV"));
            txtKhachHangThemDV_2.Text = gridViewKhachHang_DVtabThemDV.GetRowCellValue(gridViewKhachHang_DVtabThemDV.FocusedRowHandle, "MaKH").ToString();
            txtMaDichVuTabXoaDV.Text = gridViewKhachHang_DVtabThemDV.GetRowCellValue(gridViewKhachHang_DVtabThemDV.FocusedRowHandle, "MaDV").ToString();
        }

        //Lấy ngẫu nhiên 1 chuỗi string
        private String RandomString(int doDaiChuoi)
        {
            Random rd = new Random();
            const string mauKiTu = "qwertyuiopasdfghjklzxcvbnm123456789";
            var chuoiNgauNhien = new StringBuilder();
            for(var i = 0; i < doDaiChuoi; i++)
            {
                var c = mauKiTu[rd.Next(0, mauKiTu.Length)];
                chuoiNgauNhien.Append(c);
            }
            return chuoiNgauNhien.ToString();
        }
        private void btnThemDVChoKHTabQLP_Click(object sender, EventArgs e)
        {
            if (!KiemTraSaiThemDVChoKhach()) { return; }
            int soLuongDV = Convert.ToInt32(txtSoLuongDVTabThemDV.Text);
            HoaDonDV hdDV = new HoaDonDV();
            hdDV.MaDV = txtMaDVtabThemDV.Text;
            hdDV.MaKH = txtKhachHangThemDV.Text;
            hdDV.NgaySuDungDV = DateTime.Now;
            hdDV.SoLuongDV = soLuongDV;
            //Kiểm tra kết nối mạng, nếu false -> ko up dữ liệu lên webservice đồng thời lưu record vào DataOffine
            if (!checkInternetConnectionAsync())
            {
                lblNhanVienDangNhap.Text = "ko có kết nối";
                if (hoaDonDvBUS.ThemHoaDonDVoffline2(hdDV))
                    MessageBox.Show("Đã thêm thành công dịch vụ cho " + khacHangBUS.LayTenKhachHangByMaKH(hdDV.MaKH));
                else
                {
                    MessageBox.Show("Thêm dịch vụ thất bại");
                }
            }
            else//có kết nối mạng
            {
                lblNhanVienDangNhap.Text = "có kết nối";
                //Thêm hd lên webservice
                if (hoaDonDvBUS.ThemHoaDonDVWeb(hdDV))
                    MessageBox.Show("Đã thêm thành công dịch vụ cho " + khacHangBUS.LayTenKhachHangByMaKH(hdDV.MaKH));
                else
                {
                    MessageBox.Show("Thêm dịch vụ thất bại");
                }
            }
            //refresh data trên gridView
            gridViewKhachHang_DVtabThemDV.RefreshData();
            gridControlKhachHang_DVtabThemDV.RefreshDataSource();
            sqlDataScHoaDonDV_ThemDV.Fill();
        }
        private void btnXoaDichVuTabThemDV_Click(object sender, EventArgs e)
        {
            if (!KiemTraSaiXoaDVChoKhach()) { return; }            
            if(!hoaDonDvBUS.XoaMotDichVuKH(txtKhachHangThemDV_2.Text, txtMaDichVuTabXoaDV.Text, dateTimeNgaySuDungTabThemDV.Value)) { }

            gridViewKhachHang_DVtabThemDV.RefreshData();
            gridControlKhachHang_DVtabThemDV.RefreshDataSource();
            sqlDataScHoaDonDV_ThemDV.Fill();
        }
        private bool KiemTraSaiXoaDVChoKhach()
        {
            if (txtKhachHangThemDV_2.Text.Trim() == "" || txtMaDichVuTabXoaDV.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống thông tin");
                return false;
            }
            return true;
        }
        private bool KiemTraSaiThemDVChoKhach()
        {
            if(txtKhachHangThemDV.Text.Trim() == "" || txtMaDVtabThemDV.Text.Trim() == "" || txtSoLuongDVTabThemDV.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống thông tin");
                return false;
            }
            return true;
        }
        //Làm mới khung các dịch vụ của khác hàng
        private void LamMoiTableDichVuThanhToan(string maKHCanThanhToan)
        {
            QLKSDataContext db = new QLKSDataContext();
            
            //Lấy ra tất cả các dịch vụ của khách hàng hiện tại cần thanh toán
            SqlConnection con = new SqlConnection(db.Connection.ConnectionString);
            SqlDataAdapter sda = new SqlDataAdapter("select * from HoaDonDV where MaKH = '" + maKHCanThanhToan + "'", con);
            DataTable dataTable = new DataTable();
            sda.Fill(dataTable);
            dataGridViewChiTietDV.Rows.Clear();
            foreach (DataRow item in dataTable.Rows)
            {
                int n = dataGridViewChiTietDV.Rows.Add();
                dataGridViewChiTietDV.Rows[n].Cells[0].Value = maKHCanThanhToan;
                dataGridViewChiTietDV.Rows[n].Cells[1].Value = item[1].ToString();
                dataGridViewChiTietDV.Rows[n].Cells[2].Value = item[2].ToString();
                dataGridViewChiTietDV.Rows[n].Cells[3].Value = item[3].ToString();
            }
        }

        private void btnDangXuat_Click(object sender, EventArgs e)
        {
            //Đăng xuất và thoát khỏi form chính
            nhanVienDangNhapHienTai = null;
            lblNhanVienDangNhap.Text = "";
            lblNhanVienDangNhap2.Text = "";
            this.Hide();
            //quay lại form đăng nhập
            fDangNhap = new FormDangNhap();
            fDangNhap.ShowDialog();           
            this.Close();
        }

        private void lblNhanVienDangNhap_Click(object sender, EventArgs e)
        {
            lblNhanVienDangNhap.Text = dataOffBUS.DemSoLuongDataOff().ToString();
            //Đăng xuất và thoát khỏi form chính
            //nhanVienDangNhapHienTai = null;
            //lblNhanVienDangNhap.Text = "";
            //lblNhanVienDangNhap2.Text = "";
            //fDangNhap = new FormDangNhap();
            //fDangNhap.Show();
            //this.Hide();
            //this.Close();
        }
        
        private void KiemTraSaiQuanLyKhachHang()
        {

            if (txtMaKHTabQLNV.Text.Trim() == "" || txtTenKH.Text.Trim() == "" 
                || txtCMND_KH.Text.Trim() == "" || txtQuocTichKH.Text.Trim() == "")
            {
                MessageBox.Show("Không được để trống trông tin");
                return;
            }
        }
        private void btnThemKhachHangTabQL_Click(object sender, EventArgs e)
        {
            KiemTraSaiQuanLyKhachHang();
            if (khacHangBUS.KiemTraTrungMaKH(txtMaKHTabQLNV.Text))
            {
                MessageBox.Show("Trùng mã khách hàng");
                return;
            }
            KhachHang kh = new KhachHang();
            kh.MaKH = txtMaKHTabQLNV.Text;
            kh.DiaChi = txtDiaChiKH.Text;
            kh.HoTenKH = txtTenKH.Text;
            kh.Sodt = txtSoDtKH.Text;
            kh.CMND = txtCMND_KH.Text;
            kh.QuocTich = txtQuocTichKH.Text;
            if (khacHangBUS.ThemKhachHang(kh)) MessageBox.Show("Thêm Thành Công");
        }

        private void btnSuaKhachHangTabQL_Click(object sender, EventArgs e)
        {
            KiemTraSaiQuanLyKhachHang();
            if (!nhanVienBUS.KiemTraTrungMaNV(txtMaNhanVien.Text))
            {
                MessageBox.Show("Chọn khách hàng có sẵn");
                return;
            }
            KhachHang kh = new KhachHang();
            kh.MaKH = txtMaKHTabQLNV.Text;
            kh.DiaChi = txtDiaChiKH.Text;
            kh.HoTenKH = txtTenKH.Text;
            kh.Sodt = txtSoDtKH.Text;
            kh.CMND = txtCMND_KH.Text;
            kh.QuocTich = txtQuocTichKH.Text;
            if (khacHangBUS.CapNhatKhachHang(kh)) MessageBox.Show("Cập nhật Thành Công");
        }

        private void btnXoaKhachHangTabQL_Click(object sender, EventArgs e)
        {
            if(txtMaKHTabQLNV.Text.Trim() == "")
            {
                MessageBox.Show("Chọn một khách hàng để xóa");
                return;
            }
            if (!khacHangBUS.XoaKhachHang(txtMaKHTabQLNV.Text))
            {
                MessageBox.Show("Xóa không thành công");
            }
        }
        private void KiemTraQuanLyDichVu()
        {
            if(txtMaDV.Text.Trim() == "" || txtGiaDV.Text.Trim() == "")
            {
                MessageBox.Show("Không đươc để trống thông tin (*) ");
                return;
            }
        }
        private void btnThemDichVuTabQL_Click(object sender, EventArgs e)
        {
            KiemTraQuanLyDichVu();
            if (dichVuBUS.KiemTraTrungMaDV(txtMaDV.Text))
            {
                MessageBox.Show("Trùng mã dịch vụ");
                return;
            }
            DichVu dichVu = new DichVu();
            dichVu.MaDV = txtMaDV.Text;
            dichVu.MoTaDV = txtMoTaDV.Text;
            dichVu.GiaDV = Convert.ToDecimal(txtGiaDV.Text);
            if (dichVuBUS.ThemDichVu(dichVu))
            { MessageBox.Show("Thêm Thành Công"); }            
        }

        private void btnSuaDichVuTabQL_Click(object sender, EventArgs e)
        {
            KiemTraQuanLyDichVu();
            if (!dichVuBUS.KiemTraTrungMaDV(txtMaDV.Text))
            {
                MessageBox.Show("Chọn dịch vụ có sẵn");
                return;
            }
            DichVu dichVu = new DichVu();
            dichVu.MaDV = txtMaDV.Text;
            dichVu.MoTaDV = txtMoTaDV.Text;
            dichVu.GiaDV = Convert.ToDecimal(txtGiaDV.Text);
            if (dichVuBUS.CapNhatDichVu(dichVu))
            { MessageBox.Show("Cập Nhật Thành Công"); }
        }

        private void btnXoaDichVuTabQL_Click(object sender, EventArgs e)
        {
            if(txtMaDV.Text.Trim() == "")
            {
                MessageBox.Show("Chọn một dịch vụ trước");
                return;
            }
            if (!dichVuBUS.XoaDichVu(txtMaDV.Text))
            {
                MessageBox.Show("Xóa không thành công");
            }
        }

        private void tileItmThemDichVuChoKhach_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 0;
            tabPaneQuanLyPhong.SelectedPage = tabNavPageQuanLyThemDichVu;           
        }

        private void tileItmDatPhongTruoc_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 2;
            tabPaneDatPhong.SelectedPage = tabNavPageDatPhongTruoc;
        }

        private void tileItmDatPhongTaiCho_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 2;
            tabPaneDatPhong.SelectedPage = tabNavPageDatPhongTaiCho;
        }

        private void tileItemLapHoaDon_ItemClick(object sender, TileItemEventArgs e)
        {
            if(lblTenKhachHangTabHD.Text == "")
            {
                MenuChinhClick();
                navigationPaneAdmin.SelectedPageIndex = 0;
                tabPaneQuanLyPhong.SelectedPage = tabNavQuanLyDSPhong;
                MessageBox.Show("Chọn một phòng cần thanh toán trước");               
            }
            else
            {
                MenuChinhClick();
                navigationPaneAdmin.SelectedPageIndex = 3;
            }
            
        }

        private void btnChonPhongTTKhac_Click(object sender, EventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 0;
            tabPaneQuanLyPhong.SelectedPage = tabNavQuanLyDSPhong;
        }
        private void MenuChinhClick()
        {
            navigationPaneAdmin.Visible = true;
            navigationPaneAdmin.State = DevExpress.XtraBars.Navigation.NavigationPaneState.Expanded;
        }
        private void tileItemDanhSachPhong_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 0;
        }

        private void tileItmQuanLyDV_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 1;
            navFrQuanLyChiTiet.SelectedPage = nhanVienNavigationPage;
        }

        private void tileItmDanhSacNhanVien_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 1;
            navFrQuanLyChiTiet.SelectedPage = nhanVienNavigationPage;
        }

        private void tileItmKhachHang_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 1;
            navFrQuanLyChiTiet.SelectedPage = khachHangNavigationPage;
        }

        private void tileItmQLHoaDonThue_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 1;
            navFrQuanLyChiTiet.SelectedPage = hoaDonThuePhongNavigationPage;
        }

        private void tileItmQuanLyPhng_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 1;
            navFrQuanLyChiTiet.SelectedPage = phongNavigationPage;
        }

        private void tileItmQuanLyLoaiP_ItemClick(object sender, TileItemEventArgs e)
        {
            MenuChinhClick();
            navigationPaneAdmin.SelectedPageIndex = 1;
            navFrQuanLyChiTiet.SelectedPage = loaiPhongNavigationPage;
        }

        private void btnLamDSdichVu_Click(object sender, EventArgs e)
        {
            LamMoiTableDichVuThanhToan(maKhachHangThanhToan);
        }
      
        private void ChiChoPhepNhapSo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;
            }
        }

        private void btnThemDichVuTabThanhToan_Click(object sender, EventArgs e)
        {
            //ChiTietLoaiPhong
            //TienNghi
            //TaiKhoanKH
            //HoaDonThuePhong
        }

        private void btnThemLoaiPhongTabQL_Click(object sender, EventArgs e)
        {

        }

        private void btnSuaLoaiPhongTabQL_Click(object sender, EventArgs e)
        {

        }

        private void btnXoaLoaiPhongTabQL_Click(object sender, EventArgs e)
        {

        }

        private void btnThemHDThuePhong_Click(object sender, EventArgs e)
        {

        }

        private void btnSuaHDThuePhong_Click(object sender, EventArgs e)
        {

        }

        private void btnXoaHDThuePhong_Click(object sender, EventArgs e)
        {

        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {
            
        }
        //Thêm khách hàng mới
        private async Task<bool> LangNgeKhachHang(FirebaseEvent<KhachHang> khObject)
        {
            //Kiểm tra đối tượng Hóa đơn dv truyền vào đã 
            //bao gồm 3 Trường Hợp:
            // + Update khách hàng
            // + Insert khách hàng mới
            // + Xóa khách hàng( khách hàng đó vừa bị xóa )
            if (khObject.EventType == FirebaseEventType.InsertOrUpdate)
            {
                //Nếu kh thêm kh or cập nhật kh 
                
                int res = khacHangBUS.XuLyLangNgheKhachHang(khObject.Object.MaKH, khObject.Object.HoTenKH, khObject.Object.DiaChi, khObject.Object.Sodt, khObject.Object.QuocTich, khObject.Object.CMND);
                //MessageBox.Show(res.ToString());
                if (res == 1 || res == 2)
                {
                    //sau khi thêm kh mới thì phía nhân viên nhận dc dữ liệu -> cập nhật và sau đó xóa data đó trên firebase đồng thời

                    await firebase
                          .Child("KhachHang")
                          .Child(khObject.Key)
                          .DeleteAsync();
                    //MessageBox.Show("Inserted and deleted " + khObject.Object.MaKH + " " + khObject.Object.HoTenKH + " " + khObject.Object.DiaChi);
                }

            }
            else if (khObject.EventType == FirebaseEventType.Delete)
            {
                //nếu khách hàng delete khách hàng- tài khoản
            }

            return false;
        }

        private async Task<bool> LangNgeDichVu(FirebaseEvent<HoaDonDV> hdDVObject)
        {
            //Kiểm tra đối tượng Hóa đơn dv truyền vào đã 
            //bao gồm 3 Trường Hợp:
            // + Update Hóa đơn
            // + Insert Hóa đơn mới
            // + Xóa Hóa Đơn( hóa đơn đó ĐÃ bị xóa )
            if (hdDVObject.EventType == FirebaseEventType.InsertOrUpdate)
            {
                //bool res =  hoaDonDvBUS.KiemTraTonTaiHoaDonDV(hdDVObject.Object.MaKH, hdDVObject.Object.MaDV, hdDVObject.Object.SoLuongDV, hdDVObject.Object.NgaySuDungDV);
                //Nếu kh thêm hóa đơn or cập nhật hd 
                if(dataOffBUS.DemSoLuongDataOff() != 0)
                {
                    hoaDonDvBUS.CapNhatHoaDonDVLenService();
                }
                int res = hoaDonDvBUS.XuLyLangNgheDichVu(hdDVObject.Object.MaKH, hdDVObject.Object.MaDV, hdDVObject.Object.SoLuongDV, hdDVObject.Object.NgaySuDungDV);
                MessageBox.Show(res.ToString());
                MessageBox.Show("Khách hàng " + khacHangBUS.LayTenKhachHangByMaKH(hdDVObject.Object.MaKH) + " đã gọi " + hdDVObject.Object.SoLuongDV + " " + dichVuBUS.LayTenDichVuByMaDV(hdDVObject.Object.MaDV));
                if (res == 1 || res == 0 || res == 2)
                {
                    //sau khi thêm hd mới thì phía nhân viên nhận dc dữ liệu -> cập nhật và sau đó xóa data đó trên firebase đồng thời
                    //MessageBox.Show("Khách hàng " + khacHangBUS.LayTenKhachHangByMaKH(hdDVObject.Object.MaKH) + " đã gọi " + hdDVObject.Object.SoLuongDV + " " + dichVuBUS.LayDichVuByMaDV(hdDVObject.Object.MaDV));
                    await firebase
                          .Child("HoaDonDV")
                          .Child(hdDVObject.Key)
                          .DeleteAsync();
                    //MessageBox.Show("Inserted and deleted " + hdDVObject.Object.MaKH + " " + hdDVObject.Object.MaDV + " " + hdDVObject.Object.NgaySuDungDV);
                }
               
            }
            else if(hdDVObject.EventType == FirebaseEventType.Delete)
            {
                //nếu khách hàng delete hóa đơn
            }
            
            return false;
        }
        
        //private async Task RunPost()
        //{
        //    await firebase.Child("NhanVien")
        //        .Child("NV03")
        //        .PutAsync(new NhanVien("D"));// PostAsync(new NhanVien("D"));//.PutAsync(new Dinosaur());

        //}
        private void RunStreamingHDDV()
        {

            try
            {
                var observable = firebase
                      .Child("HoaDonDV")
                      .AsObservable<HoaDonDV>()
                      .Subscribe(hoaDonDVEvent => LangNgeDichVu(hoaDonDVEvent));
                        //.Subscribe(d => lblTestFireBaseHDDV.Text = ("Hóa đơn dv " + d.Key + " -> " + d.Object.MaDV + " - " + d.EventType.ToString() + " - " + d.Object.NgaySuDungDV));
                       //.Subscribe(d => MessageBox.Show("Hóa đơn dv " + d.Key + " -> " + d.Object.MaDV + " - " + d.Object.MaKH + " - " + d.EventType.ToString() + " - " + d.EventSource.ToString()));
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex.ToString());
            }
        }
        private void RunStreamingKhachHang()
        {

            try
            {
                var observable = firebase
                      .Child("KhachHang")
                      .AsObservable<KhachHang>()
                      .Subscribe(khachHangEvent => LangNgeKhachHang(khachHangEvent));
                //.Subscribe(d => lblTestFireBaseHDDV.Text = ("Hóa đơn dv " + d.Key + " -> " + d.Object.MaDV + " - " + d.EventType.ToString() + " - " + d.Object.NgaySuDungDV));
                //.Subscribe(d => MessageBox.Show("Hóa đơn dv " + d.Key + " -> " + d.Object.MaDV + " - " + d.Object.MaKH + " - " + d.EventType.ToString() + " - " + d.EventSource.ToString()));
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex.ToString());
            }
        }

        private void btnLamMoiHDDVtabQLP_Click(object sender, EventArgs e)
        {
            gridViewKhachHang_DVtabThemDV.RefreshData();
            gridControlKhachHang_DVtabThemDV.RefreshDataSource();
            sqlDataScHoaDonDV_ThemDV.Fill();
        }
        //public static bool IsInternet()
        //{
        //    ConnectionProfile connections = NetworkInformation.GetInternetConnectionProfile();
        //    bool internet = connections != null && connections.GetNetworkConnectivityLevel() == NetworkConnectivityLevel.InternetAccess;
        //    return internet;
        //}
        public bool checkInternetConnectionAsync()
        {


            try
            {
                using (var client = new WebClient())
                using (var stream = client.OpenRead("http://www.google.com"))
                {
                    lblNhanVienDangNhap.Text = "true";
                    return true;
                }
            }
            catch
            {
                lblNhanVienDangNhap.Text = "false";
                return false;
            }
            
        }

        private void groupBoxThongTinPhongTabQLP_Enter(object sender, EventArgs e)
        {

        }

        private void dateTimeNgayDatTabDT_ValueChanged(object sender, EventArgs e)
        {
            Phong phonDangChon = phongBUS.LayPhongQuaSoPhong(txtSoPhongTabDT.Text);
            DateTime ngayDatLonNhat = datPhongBUS.LayNgayDatPhongLonNhatCuaPhong(phonDangChon);
            if (phonDangChon.TinhTrang != 0)
            {
                if (dateTimeNgayDatTabDT.Value > ngayDatLonNhat)
                {
                    dateTimeNgayDatTabDT.Value = ngayDatLonNhat;
                    MessageBox.Show("Vì phòng này đã đặt trước hoặc đang ở nên ngày đặt phải lớn hơn " + ngayDatLonNhat.ToString());
                }
            }
            phongBUS.CapNhatTrangThaiPhong();
        }
    }
}